#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""

import asyncio
import asyncpg
import signal
import sys
from contextlib import asynccontextmanager

class DatabaseManager:
    def __init__(self, host="localhost", port=5432, user="postgres", password="password"):
        self.host = host
        self.port = port
        self.user = user
        self.password = password
        self.db_name = "moex_data"
        self.connection = None
        
    async def create_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            print("üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ postgres
            postgres_conn = await asyncpg.connect(
                user=self.user,
                password=self.password,
                host=self.host,
                port=self.port,
                database="postgres"
            )
            
            print("üìã –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await postgres_conn.execute(f"""
                CREATE DATABASE {self.db_name} 
                WITH 
                OWNER = {self.user}
                ENCODING = 'UTF8'
                LC_COLLATE = 'Russian_Russia.utf8'
                LC_CTYPE = 'Russian_Russia.utf8'
                TABLESPACE = pg_default
                CONNECTION LIMIT = -1;
            """)
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{self.db_name}' —Å–æ–∑–¥–∞–Ω–∞!")
            await postgres_conn.close()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await self.create_tables()
            
        except asyncpg.exceptions.DuplicateDatabaseError:
            print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{self.db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await self.create_tables()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.connection = await asyncpg.connect(
                user=self.user,
                password=self.password,
                host=self.host,
                port=self.port,
                database=self.db_name
            )
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É stock_data
            await self.connection.execute("""
                CREATE TABLE IF NOT EXISTS stock_data (
                    id SERIAL PRIMARY KEY,
                    ticker VARCHAR(20) NOT NULL,
                    date DATE NOT NULL,
                    price FLOAT NOT NULL,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE
                );
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'stock_data' —Å–æ–∑–¥–∞–Ω–∞!")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            await self.connection.execute("""
                CREATE INDEX IF NOT EXISTS ix_stock_data_id 
                ON stock_data (id);
            """)
            
            await self.connection.execute("""
                CREATE INDEX IF NOT EXISTS ix_stock_data_ticker 
                ON stock_data (ticker);
            """)
            
            await self.connection.execute("""
                CREATE UNIQUE INDEX IF NOT EXISTS idx_ticker_date 
                ON stock_data (ticker, date);
            """)
            
            print("‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            raise
    
    async def drop_database(self):
        """–£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.connection:
                await self.connection.close()
                print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
            
            print("üóëÔ∏è –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ postgres
            postgres_conn = await asyncpg.connect(
                user=self.user,
                password=self.password,
                host=self.host,
                port=self.port,
                database="postgres"
            )
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –±–∞–∑–µ
            await postgres_conn.execute(f"""
                SELECT pg_terminate_backend(pid)
                FROM pg_stat_activity
                WHERE datname = '{self.db_name}' AND pid <> pg_backend_pid();
            """)
            
            # –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await postgres_conn.execute(f"DROP DATABASE IF EXISTS {self.db_name};")
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{self.db_name}' —É–¥–∞–ª–µ–Ω–∞!")
            
            await postgres_conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        await self.drop_database()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
db_manager = None

async def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global db_manager
    db_manager = DatabaseManager()
    await db_manager.create_database()
    print("üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

async def cleanup_database():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global db_manager
    if db_manager:
        await db_manager.cleanup()
        print("üßπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    asyncio.create_task(cleanup_database())
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    async def main():
        try:
            await setup_database()
            print("‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        finally:
            await cleanup_database()
    
    asyncio.run(main())
